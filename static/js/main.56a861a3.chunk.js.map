{"version":3,"sources":["searches.module.css","logo.svg","Searches.js","Fetcher.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Searches","title","category","HTTPS","link","description","Auth","className","style","display","href","target","button","onClick","Fetcher","useState","searches","setSearches","searched","setSearched","query","setQuery","Http","setHttp","useEffect","getData","url","a","fetch","response","json","data","entries","console","log","onSubmit","e","preventDefault","type","value","onChange","map","search","API","key","Category","Description","Link","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4EACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,wBAAwB,OAAS,2B,mBCDjGD,EAAOC,QAAU,IAA0B,kC,6QCiB5BC,EAdE,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,YAAwB,EAAXC,KAC3D,OACI,yBAAKC,UAAWC,IAAMR,UAClB,wBAAIO,UAAWC,IAAMP,OAAQA,GAC7B,wBAAIM,UAAWC,IAAMN,UAArB,cAA2CA,GAC3C,wBAAIK,UAAWC,IAAMH,aAArB,gBAAgDA,GAChD,2BAAIF,GACJ,uBAAGK,MAAO,CAACC,QAAS,cAAeC,KAAMN,EAAMO,OAAO,UAClD,4BAAQJ,UAAWC,IAAMI,OAAQC,QAAST,GAA1C,cC0DDU,EAjEC,WAAO,IAAD,EAIcC,mBAAS,IAJvB,mBAIXC,EAJW,KAIDC,EAJC,OAKcF,mBAAS,IALvB,mBAKXG,EALW,KAKDC,EALC,OAMQJ,mBAAS,IANjB,mBAMXK,EANW,KAMJC,EANI,OAOMN,mBAAS,IAPf,mBAOXO,EAPW,KAOLC,EAPK,KAUlBC,qBAAU,WACNC,MACD,CAACL,IACJ,IAAMM,EAAG,mDAA+CN,EAA/C,kBAA8DE,GAgBjEG,EAAO,uCAAG,8BAAAE,EAAA,sEACWC,MAAMF,GADjB,cACNG,EADM,gBAEOA,EAASC,OAFhB,OAENC,EAFM,OAGZd,EAAYc,EAAKC,SACjBC,QAAQC,IAAIH,EAAKC,SAJL,2CAAH,qDAMb,OACI,yBAAKzB,UAAU,OACX,wBAAIA,UAAU,UAAd,cACA,0BAAM4B,SArBI,SAAAC,GACdA,EAAEC,iBACFhB,EAASH,GACTC,EAAY,IACZI,EAAQ,KAiBuBhB,UAAU,cACjC,2BAAOA,UAAU,YAAY+B,KAAK,OAAOC,MAAOrB,EAAUsB,SAzBjD,SAAAJ,GACjBjB,EAAYiB,EAAEzB,OAAO4B,UAyBb,4BAAQhC,UAAU,eAAe+B,KAAK,UAAtC,UAGA,4BAAQ/B,UAAU,WAAWM,QApBzB,SAAAuB,GACZA,EAAEC,iBACFd,EAAQ,UAkBA,eAKJ,yBAAKhB,UAAU,YACdS,EAASyB,KAAI,SAAAC,GAAM,OAChB,kBAAC,EAAD,CAAUzC,MAAOyC,EAAOC,IACxBC,IAAKF,EAAOC,IACZzC,SAAUwC,EAAOG,SACjBxC,YAAaqC,EAAOI,YACpB1C,KAAMsC,EAAOK,KACb5C,MAAOuC,EAAOvC,MACdG,KAAMoC,EAAOpC,UARjB,OCnCG0C,G,6KATX,OACE,6BACE,kBAAC,EAAD,W,GALUC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.56a861a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searches\":\"searches_Searches__u4znS\",\"title\":\"searches_title__2n4Bx\",\"button\":\"searches_button__17bB2\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport style from './searches.module.css'\r\n\r\nconst Searches = ({ title, category, HTTPS, link, description, Auth }) => {\r\n    return (\r\n        <div className={style.Searches}>\r\n            <h1 className={style.title}>{title}</h1>\r\n            <h2 className={style.category}> Category: {category}</h2>\r\n            <h4 className={style.description}>Description: {description}</h4>\r\n            <p>{HTTPS}</p>\r\n            <a style={{display: \"table-cell\"}} href={link} target=\"_blank\">\r\n                <button className={style.button} onClick={link}>Get API</button>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searches","import React, { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './Fetcher.css';\r\nimport Searches from './Searches';\r\nconst Fetcher = () => {\r\n    \r\n    \r\n\r\n    const [searches, setSearches] = useState([]);\r\n    const [searched, setSearched] = useState(\"\");\r\n    const [query, setQuery] = useState('');\r\n    const [Http, setHttp] = useState('');\r\n    \r\n   \r\n    useEffect(() => {\r\n        getData();\r\n    }, [query]);\r\n    const url = `https://api.publicapis.org/entries?title=${query}&https=${Http}`\r\n    const updateSearch = e => {\r\n        setSearched(e.target.value)\r\n    }\r\n    const getSearch = e => {\r\n        e.preventDefault();\r\n        setQuery(searched);\r\n        setSearched(\"\");\r\n        setHttp('')\r\n    }\r\n    const getHTTP = e => {\r\n        e.preventDefault();\r\n        setHttp('true');\r\n    }\r\n   \r\n\r\n    const getData = async () => {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        setSearches(data.entries);\r\n        console.log(data.entries);\r\n    };\r\n    return (\r\n        <div className=\"Api\" >\r\n            <h1 className=\"header\">API FINDER</h1>\r\n            <form onSubmit={getSearch} className=\"SearchForm\">\r\n                <input className=\"SearchBar\" type=\"text\" value={searched} onChange={updateSearch}/>\r\n                <button className=\"SearchButton\" type=\"submit\">\r\n                    Search\r\n                </button>\r\n                <button className=\"HtButton\" onClick={getHTTP}>With HTTPS</button>\r\n                \r\n            </form>\r\n            \r\n\r\n            <div className=\"searches\">\r\n            {searches.map(search => (\r\n                <Searches title={search.API} \r\n                key={search.API}\r\n                category={search.Category} \r\n                description={search.Description}\r\n                link={search.Link}\r\n                HTTPS={search.HTTPS}\r\n                Auth={search.Auth}/>\r\n            ))};\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Fetcher;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Fetcher from './Fetcher';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  render () {\n    return (\n      <div >\n        <Fetcher />\n      </div>\n    )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}